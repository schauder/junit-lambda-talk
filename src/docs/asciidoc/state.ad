== State Pattern
=== Problem

* Ein Objekt soll abhängig vom Zustand sein Verhalten ändern.
* Es soll ein Zustandsautomat implementiert werden

=== Lösung

[plantuml]
....
class Context
interface State {
  execute()
}
class StateA implements State
class StateB implements State

Context --> State
....

Die Zustände werden als Implementationen von eines Interfaces representiert.
Der jeweils aktuelle Zustand wird vom Context gehalten. Der Context ändert den verwendeten Zustand nach Bedarf. Wie dies
geschieht ist durch dieses Pattern nicht vorgegeben.

_Der einzige Unterschied zum State Pattern ist, dass der Context selbst seinen State bestimmt_

=== Codebeispiel 1/3
[source,java]
.Cat.java
----
include::../../main/java/de/onsite/ood/state/Cat.java[tags=example]
----

[source,java]
.CatState.java
----
include::../../main/java/de/onsite/ood/state/CatState.java[tags=example]
----

=== Codebeispiel 2/3
[source,java]
.YoungCat.java
----
include::../../main/java/de/onsite/ood/state/YoungCat.java[tags=example]
----

[source,java]
.AdultCat.java
----
include::../../main/java/de/onsite/ood/state/AdultCat.java[tags=example]
----

=== Codebeispiel 3/3
[source,java]
.OldCat.java
----
include::../../main/java/de/onsite/ood/state/OldCat.java[tags=example]
----

[source,java]
.DeadCat.java
----
include::../../main/java/de/onsite/ood/state/DeadCat.java[tags=example]
----
