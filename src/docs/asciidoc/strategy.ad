== Strategy Pattern

=== Problem

Es gibt verschiedene Varianten eine Aktion durchzuführen. Welche Variante verwendet wird, soll einfach änderbar sein,
oder neue Varianten sollen einfach ergänzt werden können.

=== Beispiel

* Sortieren: Welcher Algorithmus (Bubble, Quick, Merge ...) soll verwendet werden
* Sortieren: Wie soll bestimmt werden ob x < y ist?

=== Lösung

[plantuml]
....
class Context
interface Strategy {
  execute()
}
class StrategyA implements Strategy
class StrategyB implements Strategy

Context --> Strategy
....

Es wird ein allgemeinese Interface für die Aktion eingeführt, welches von mehrern Klassen für die verschiedenen
Varianten implementiert wird.

Der `Context` bietet die öffentliche API an, und bündelt eventuell weitere Funktionalität,
 die unabhängig von der Strategie ist.

=== Codebeispiel

* Java Collection API
** Diverse Collections sind der Context
** Comparator ist die Strategie

=== Bemerkungen

* Ein Context kann mehrere unterschiedliche Strategien für unterschiedliche Aufgaben beherbergen
* Im Prinzipi ist das Strategiepattern elementarer Polymorphismus
* Wenn das Strategy Interface nur eine Methode hat, kann ein Lambda Ausdruck verwendet werden
