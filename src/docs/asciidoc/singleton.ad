== Singleton Pattern
=== Problem

Es darf nur eine Instanz geben.

=== Beispiele

* Event Dispatch Thread
* Ein Cache

=== Lösung

* Eine Instanz erzeugen
* Diese Instanz für alle erreichbar machen
* Verhindern das weitere Instanzen erzeugt werden

=== Randbedingung Intanstanzierung

* Eager
* Lazy (beware of double checked locking)

=== Randbedingung Scope

* Global
* Per Thread
* In einem Verteilten System
* OSGI Bundle

=== Randbedingung Skalierbarkeit

* Verteilte Singletons sind ein Bottleneck (oft z.B. Datenbanken)
* Synchronisierung auf einer Instanz

=== Randbedingung Vererbung

* Soll/Muss es immer die selbe Klasse sein
* Oder soll z.B. für Tests, das Singleton ersetzbar sein?
* Vererbung kann die Singleton Eigenschaft brechen

=== Randbedingung Erreichbarkeit

* GOF hat das Singleton explizit global erreichbar gemacht
* Alternativ injezieren per Dependency Injection

=== UML

[plantuml]
....
class SingletonUser
class Singleton {
  {static} Singleton instance
}

SingletonUser ---> Singleton : uses
....

=== Codebeispiele Enum
[source,java]
.EnumSingletonCounter.java
----
include::../../main/java/de/onsite/ood/singleton/EnumSingletonCounter.java[tags=example]
----

=== Codebeispiele Eager
[source,java]
.EagerSingletonCounter.java
----
include::../../main/java/de/onsite/ood/singleton/EagerSingletonCounter.java[tags=example]
----

=== Codebeispiele Lazy
[source,java]
.LazySingletonCounter.java
----
include::../../main/java/de/onsite/ood/singleton/LazySingletonCounter.java[tags=example]
----

=== Beschränkungen
Singleton können durch Hacks 'entsingled' werden

* Reflection
* Classloader Manipulation (OSGI)

=== Falscher Einsatz
Braucht man nur eine Instanz?

Oder darf es nur eine Instanz geben?
