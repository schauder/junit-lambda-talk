== Decorator

=== Problem

* Einzelne Objekte einer Klasse sollen ein neues Verhalten bekommen aber nicht alle

=== Lösung

[plantuml]
....
interface Component {
  operation()
}
class ConcreteComponent implements Component
class Decorator implements Component
Decorator --> Component : delegate
class ConcreteDecoratorA extends Decorator {
  moreState
}
class ConcreteDecoratorB extends Decorator {
  additionalOperation()
}
....

* Zusätzliches Verhalten wird in separaten Klassen (Decorators) implementiert
* Alle anderen Operationen werden an die ursprüngliche Klasse delegiert
* Decorator und ursprüngliche Klasse implementieren das gleiche Interface

=== Code Beispiel 1/4

[source,java]
.Cat.java
----
include::../../main/java/de/onsite/ood/decorator/Cat.java[tags=example]
----

[source,java]
.SimpleCat.java
----
include::../../main/java/de/onsite/ood/decorator/SimpleCat.java[tags=example]
----

=== Code Beispiel 2/4

[source,java]
.CatDecorator.java
----
include::../../main/java/de/onsite/ood/decorator/CatDecorator.java[tags=example]
----

=== Code Beispiel 3/4

[source,java]
.SwimmingCat.java
----
include::../../main/java/de/onsite/ood/decorator/SwimmingCat.java[tags=example]
----

=== Code Beispiel 4/4

[source,java]
.CatWithBellColar.java
----
include::../../main/java/de/onsite/ood/decorator/CatWithBellColar.java[tags=example]
----

=== Bemerkungen

* Viele kleine Objekte -> Kann verwirrend werden
* Objekt Identität / equal und hashCode