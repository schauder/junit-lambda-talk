== TDD

image::tdd.jpg[Test Driven Development by Kent Beck, link="http://amzn.to/160tVdo"]

=== Red

* den einfachsten Test schreiben, der rot ist
* nicht compilieren ist rot.
* vorhandene Tests dürfen (und sollen) ergänzt werden.
* zwingt die Entwicklung in die richtige Richtung

=== Eigenschaften guter Unit-Tests

* schnell (Millisekunden)
* unabhängig
* schlägt nur dann fehl, wenn das kaputt ist was er testet
* liefert dann eine aussagekräftige Fehlermeldung
* testet genau einen Sachverhalt

=== Beliebte Irrtümer

* ein Test pro Methode
* ein Test testet eine Methode

=== Green

* den einfachsten Code schreiben der alle Tests grün macht.
* auch wenn er noch sehr anders aussieht als die entgültie Version

=== Refactor

image::refactoring.jpg[Refactoring by Martin Fowler, link="http://amzn.to/WwCI5Q"]

* Code ändern ohne sein Verhalten zu verändern
* Sowohl produktiven Code als auch Test Code.

=== Effekte

* Die Tests sind fertig wenn der Code fertig ist.
* Code endet mit hoher Test Coverage
* Code wird fast zwangsläufig modular.
* Es ist klar erkennbar was funktionier und was nicht.
* Macht schwer testbaren Code sichtbar.
* Nötigt zu einer sehr strukturierten Arbeit.
* Kaum Applikationsstarts notwendig.

=== Nicht Effekte

* Bugfreiheit.
* Ersetzt keinen Design/Architektur

