= JUnit 5

The Next Generation

****
Jens Schauder

http://blog.schauderhaft.de

https://twitter.com/jensschauder[@jensschauder]


http://www.t-systems-onsite.de/[T-Systems on site services GmbH]
****

== Who? ... Me?

Entwickler, Freunde dürfen mich Architekt nennen

JUnit Nutzer seit 2001

JUnit 5 Supporter

****
Entwickler von http://schauder.github.io/degraph/[Degraph]
****


== Das haben wir früher auch nicht gebraucht!

=== Schwer Wartbar

Internes Feld umbenennen?

NOPE!

=== Die verdammten Runner

Spring Runner? Cool!

Parameterized Runner? Cool!

Parametrisierte Spring Tests? NOPE!

=== Neu syntaktische Möglichkeiten

Lambdas!

=== Historie

2012: erster Vorschlag auf Mailing Liste

2014: Diskussion bei XP-Days Hamburg

Mitte 2015: Indigo Kampagne

Ende 2015: Prototyp

Feb 2016: JUnit 5.0 Alpha

Juli 2016: JUnit Jupiter M1 & M2

== Internals

=== Module

[plantuml]
....
package Jupiter {
[jupiter-api] as jupiterapi
[jupiter-engine] as jupiterengine
}

package Platform {
[platform-commons] as commons
[platform-console] as console
[platform-engine] as engine
[platform-gradle-plugin] as gradle
[platform-launcher] as launcher
[platform-runner] as runner
[platform-surefire-provider] as surefire
}

package Vintage {
[vintage-engine] as vintage
}

package Opentest4j {
[opentest4j]
}

package JUnit4 {
[junit4]
}

jupiterapi ..> opentest4j
jupiterapi ..> commons

jupiterengine ..> engine
jupiterengine ..> jupiterapi

console ..> launcher

gradle ..> console

launcher ..> engine

runner ..> launcher
runner ..> junit4

surefire ..> launcher

vintage ..> engine
vintage ..> junit4
....

=== Keine Package Zyklen

Dank Degraph

****
https://github.com/junit-team/junit5/pull/71[shameless plug]
****

=== Ablauf

Launcher starten

Launcher findet Engines

Engines finden Tests

Engines führen Tests aus

=== Tests starten

Gradle Plugin

Maven Plugin

Console Runner

IntelliJ Plugin (von JetBrains)

****
https://bugs.eclipse.org/bugs/show_bug.cgi?id=488566[Kein Eclipse Support]
****

== Einfache Tests!

=== JUnit4 Test laufen auch mit JUnit5

[plantuml]
....
[Tool Integration] ..> [platform-launcher]
[platform-launcher] ..> [vintage-engine] : finds
[vintage-engine] ..> [junit4]
....

=== JUnit5 läuft mit JUnit4

[plantuml]
....
[junit4] ..> [platform-runner]
[platform-runner] ..> [platform-launcher]
[platform-launcher] ..> [engines] : finds
....

[source,java]
.$02JUnit5WithRunnerTest.java
----
include::../../test/java/de/schauderhaft/junit/example/$02JUnit5WithRunnerTest.java[tags=example]
----

****
Workaround für Eclipse]
****

=== Zeichen sparen

[source,java]
.$04ProperJUnit5Test.java
----
include::../../test/java/de/schauderhaft/junit/example/$04ProperJUnit5Test.java[tags=example]
----

=== Tests  disablen

[source,java]
.$04ProperJUnit5Test.java
----
include::../../test/java/de/schauderhaft/junit/example/$04ProperJUnit5Test.java[tags=disabled]
----

=== Assume

[source,java]
.$04ProperJUnit5Test.java
----
include::../../test/java/de/schauderhaft/junit/example/$04ProperJUnit5Test.java[tags=assume]
----

=== Coole Namen

[source,java]
.$04ProperJUnit5Test.java
----
include::../../test/java/de/schauderhaft/junit/example/$04ProperJUnit5Test.java[tags=name]
----


=== Exceptions

[source,java]
.$04ProperJUnit5Test.java
----
include::../../test/java/de/schauderhaft/junit/example/$04ProperJUnit5Test.java[tags=exception]
----

=== Nested

image::nested-intellij.png[]

[source,java]
.$05NestedTests.java
----
include::../../test/java/de/schauderhaft/junit/example/$05NestedTests.java[tags=example]
----

=== Tagging

[source,java]
.$06TaggedTest.java
----
include::../../test/java/de/schauderhaft/junit/example/$06TaggedTest.java[tags=example]
----

=== Tagging Metaannotationen

[source,java]
.FastTest.java
----
include::../../test/java/de/schauderhaft/junit/example/FastTest.java[tags=example]
----

=== Filtern (Gradle Plugin)

[source, groovy]
----
junitPlatform {
    tags {
        include 'fast', 'smoke'
        // exclude 'slow', 'ci'
    }
    includeClassNamePattern '.*Tests'
}
----

=== Before + After (Code)

[source,java]
.$07BeforeAfterTest.java
----
include::../../test/java/de/schauderhaft/junit/example/$07BeforeAfterTest.java[tags=example]
----

=== Before + After (Result)

[source]
----
before all
before
one
after
before
two
after
after all
----

== Dynamische Tests


.Caffein required
WARNING: The following uses Java 8 features. You might want to apply caffein now.


=== Mit Collections

[source,java]
.$10DynamicWithCollectionTest.java
----
include::../../test/java/de/schauderhaft/junit/example/$10DynamicWithCollectionTest.java[tags=example]
----


=== Mit Streams

[source,java]
.$11DynamicWithStreamsTest.java
----
include::../../test/java/de/schauderhaft/junit/example/$11DynamicWithStreamsTest.java[tags=example]
----


=== Mit Pixie Dust

[source,java]
.$12DynamicWithPixyDustTest.java
----
include::../../test/java/de/schauderhaft/junit/example/$12DynamicWithPixyDustTest.java[tags=example]
----

=== Der Pixie Dust

[source,java]
.LambdaBasedTests.java
----
include::../../test/java/de/schauderhaft/junit/example/LambdaBasedTests.java[tags=example]
----

=== Warnung

.Dynamic Test Lifecycle
WARNING: The execution lifecycle of a dynamic test is quite different than it is for a
standard `@Test` case. Specifically, there are not any lifecycle callbacks for dynamic
tests.

== Extending Tests